You are given a 2-Dimensional array with M rows and N columns.
You are initially positioned at (0,0) which is the top-left cell in the array.
You are allowed to move either right or downwards.
The array is filled with 1's and 0's.
A 1 indicates that you can move through that cell, a 0 indicates that you cannot move through the cell.
Given a function numberOfPaths which takes in the above 2-D array, return the number of paths from the top-left cell to the bottom-right cell (i.e. (0,0) to (M-1,N-1)).
Your task is to complete the body of the function and return a single integer denoting the number of paths mentioned above. If the answer is large (greater than or equal to 10 to the 9th power + 7), then return (answer % (109 + 7)).
Sample TestCases

Input #00:
1 1 1 1
1 1 1 1
1 1 1 1

Output #00:
10

Explanation:
None of the values in the array is zero, counting all possible ways from (0,0) to (2,3) gives us 10 possible paths from the top-left to bottom-right cell.
Input #01:
1 1
0 1

Output #01:
1
Explanation:
You can move only downwards (or) right, starting from the top-left cell (0,0) your only move is to (0,1) and then (1,1). Hence only 1 path.